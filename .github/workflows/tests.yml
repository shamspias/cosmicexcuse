name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests every Monday at 9am UTC
    - cron: '0 9 * * 1'

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy isort
          pip install -e .

      - name: Check import sorting with isort
        run: |
          isort cosmicexcuse tests --check-only --diff

      - name: Format with black
        run: |
          black cosmicexcuse tests --check --diff

      - name: Lint with flake8 - critical
        run: |
          # Stop build on critical errors
          flake8 cosmicexcuse tests --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Lint with flake8 - all
        run: |
          # Full check with max line length 88 (black default)
          flake8 cosmicexcuse tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Type check with mypy
        run: |
          mypy cosmicexcuse --ignore-missing-imports
        continue-on-error: true

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ '3.9', '3.10', '3.11', '3.12' ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/Library/Caches/pip
            ~/AppData/Local/pip/Cache
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          pip install -e .

      - name: Test with pytest
        run: |
          pytest tests/ -v --cov=cosmicexcuse --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
          fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: [ lint, test ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Test installation
        run: |
          pip install dist/*.whl
          cosmicexcuse --help
          cosmicexcuse --version
          python -c "from cosmicexcuse import CosmicExcuse; print(CosmicExcuse().generate().text)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit pip-audit
          pip install -e .

      - name: Security check with safety
        run: |
          safety check --json
        continue-on-error: true

      - name: Security check with bandit
        run: |
          bandit -r cosmicexcuse -f json -o bandit-report.json
        continue-on-error: true

      - name: Security check with pip-audit
        run: |
          pip-audit
        continue-on-error: true

  docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme
          pip install -e .

      - name: Build documentation
        run: |
          cd docs
          # Create conf.py if it doesn't exist
          if [ ! -f conf.py ]; then
            echo "Warning: docs/conf.py not found. Skipping doc build."
            exit 0
          fi
          make html || sphinx-build -b html . _build/html

      - name: Upload documentation
        if: ${{ hashFiles('docs/_build/html/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/
